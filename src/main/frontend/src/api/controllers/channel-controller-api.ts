/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Channel } from '../models';
import { CreateChannelRequest } from '../models';
import { CreateGroupChatRequest } from '../models';
import { CreateMessageRequest } from '../models';
import { CreatePostRequest } from '../models';
import { CreatePrivateChatRequest } from '../models';
import { Message } from '../models';
import { Post } from '../models';
import { UpdateChannelRequest } from '../models';
import { User } from '../models';
/**
 * ChannelControllerApi - axios parameter creator
 * @export
 */
export const ChannelControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {CreateChannelRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChannel: async (body: CreateChannelRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createChannel.');
            }
            const localVarPath = `/api/channels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {CreateGroupChatRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroupChatChannel: async (body: CreateGroupChatRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createGroupChatChannel.');
            }
            const localVarPath = `/api/channels/groupChat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {CreateMessageRequest} body
         * @param {number} channelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessage: async (body: CreateMessageRequest, channelId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createMessage.');
            }
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new RequiredError('channelId','Required parameter channelId was null or undefined when calling createMessage.');
            }
            const localVarPath = `/api/channels/{channelId}/messages`
                .replace(`{${"channelId"}}`, encodeURIComponent(String(channelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {CreatePostRequest} body
         * @param {number} channelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost: async (body: CreatePostRequest, channelId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createPost.');
            }
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new RequiredError('channelId','Required parameter channelId was null or undefined when calling createPost.');
            }
            const localVarPath = `/api/channels/{channelId}/posts`
                .replace(`{${"channelId"}}`, encodeURIComponent(String(channelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {CreatePrivateChatRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPrivateChatChannel: async (body: CreatePrivateChatRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createPrivateChatChannel.');
            }
            const localVarPath = `/api/channels/privateChat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} channelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChannel: async (channelId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new RequiredError('channelId','Required parameter channelId was null or undefined when calling deleteChannel.');
            }
            const localVarPath = `/api/channels/{channelId}`
                .replace(`{${"channelId"}}`, encodeURIComponent(String(channelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} channelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelById: async (channelId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new RequiredError('channelId','Required parameter channelId was null or undefined when calling getChannelById.');
            }
            const localVarPath = `/api/channels/{channelId}`
                .replace(`{${"channelId"}}`, encodeURIComponent(String(channelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannels: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/channels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} channelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembers: async (channelId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new RequiredError('channelId','Required parameter channelId was null or undefined when calling getMembers.');
            }
            const localVarPath = `/api/channels/{channelId}/members`
                .replace(`{${"channelId"}}`, encodeURIComponent(String(channelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} channelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessages: async (channelId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new RequiredError('channelId','Required parameter channelId was null or undefined when calling getMessages.');
            }
            const localVarPath = `/api/channels/{channelId}/messages`
                .replace(`{${"channelId"}}`, encodeURIComponent(String(channelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} channelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLastMessage: async (channelId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new RequiredError('channelId','Required parameter channelId was null or undefined when calling getLastMessage.');
            }
            const localVarPath = `/api/channels/{channelId}/lastMessage`
                .replace(`{${"channelId"}}`, encodeURIComponent(String(channelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} channelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPosts: async (channelId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new RequiredError('channelId','Required parameter channelId was null or undefined when calling getPosts.');
            }
            const localVarPath = `/api/channels/{channelId}/posts`
                .replace(`{${"channelId"}}`, encodeURIComponent(String(channelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} channelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLastPost: async (channelId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new RequiredError('channelId','Required parameter channelId was null or undefined when calling getLastPost.');
            }
            const localVarPath = `/api/channels/{channelId}/lastPost`
                .replace(`{${"channelId"}}`, encodeURIComponent(String(channelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} channelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        join: async (channelId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new RequiredError('channelId','Required parameter channelId was null or undefined when calling join.');
            }
            const localVarPath = `/api/channels/{channelId}/join`
                .replace(`{${"channelId"}}`, encodeURIComponent(String(channelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {UpdateChannelRequest} body
         * @param {number} channelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChannel: async (body: UpdateChannelRequest, channelId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateChannel.');
            }
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new RequiredError('channelId','Required parameter channelId was null or undefined when calling updateChannel.');
            }
            const localVarPath = `/api/channels/{channelId}`
                .replace(`{${"channelId"}}`, encodeURIComponent(String(channelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChannelControllerApi - functional programming interface
 * @export
 */
export const ChannelControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @param {CreateChannelRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createChannel(body: CreateChannelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Channel>>> {
            const localVarAxiosArgs = await ChannelControllerApiAxiosParamCreator(configuration).createChannel(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {CreateGroupChatRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGroupChatChannel(body: CreateGroupChatRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Channel>>> {
            const localVarAxiosArgs = await ChannelControllerApiAxiosParamCreator(configuration).createGroupChatChannel(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {CreateMessageRequest} body
         * @param {number} channelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMessage(body: CreateMessageRequest, channelId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Message>>> {
            const localVarAxiosArgs = await ChannelControllerApiAxiosParamCreator(configuration).createMessage(body, channelId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {CreatePostRequest} body
         * @param {number} channelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPost(body: CreatePostRequest, channelId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Post>>> {
            const localVarAxiosArgs = await ChannelControllerApiAxiosParamCreator(configuration).createPost(body, channelId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {CreatePrivateChatRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPrivateChatChannel(body: CreatePrivateChatRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Channel>>> {
            const localVarAxiosArgs = await ChannelControllerApiAxiosParamCreator(configuration).createPrivateChatChannel(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} channelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteChannel(channelId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ChannelControllerApiAxiosParamCreator(configuration).deleteChannel(channelId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} channelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChannelById(channelId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Channel>>> {
            const localVarAxiosArgs = await ChannelControllerApiAxiosParamCreator(configuration).getChannelById(channelId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChannels(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Channel>>>> {
            const localVarAxiosArgs = await ChannelControllerApiAxiosParamCreator(configuration).getChannels(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} channelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMembers(channelId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<User>>>> {
            const localVarAxiosArgs = await ChannelControllerApiAxiosParamCreator(configuration).getMembers(channelId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} channelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMessages(channelId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Message>>>> {
            const localVarAxiosArgs = await ChannelControllerApiAxiosParamCreator(configuration).getMessages(channelId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} channelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLastMessage(channelId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Message | null>>> {
            const localVarAxiosArgs = await ChannelControllerApiAxiosParamCreator(configuration).getLastMessage(channelId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} channelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPosts(channelId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Post>>>> {
            const localVarAxiosArgs = await ChannelControllerApiAxiosParamCreator(configuration).getPosts(channelId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
         /**
         *
         * @param {number} channelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLastPost(channelId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Post | null>>> {
            const localVarAxiosArgs = await ChannelControllerApiAxiosParamCreator(configuration).getLastPost(channelId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} channelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async join(channelId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Channel>>> {
            const localVarAxiosArgs = await ChannelControllerApiAxiosParamCreator(configuration).join(channelId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {UpdateChannelRequest} body
         * @param {number} channelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateChannel(body: UpdateChannelRequest, channelId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Channel>>> {
            const localVarAxiosArgs = await ChannelControllerApiAxiosParamCreator(configuration).updateChannel(body, channelId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ChannelControllerApi - factory interface
 * @export
 */
export const ChannelControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @param {CreateChannelRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createChannel(body: CreateChannelRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<Channel>> {
            return ChannelControllerApiFp(configuration).createChannel(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {CreateGroupChatRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGroupChatChannel(body: CreateGroupChatRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<Channel>> {
            return ChannelControllerApiFp(configuration).createGroupChatChannel(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {CreateMessageRequest} body
         * @param {number} channelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMessage(body: CreateMessageRequest, channelId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Message>> {
            return ChannelControllerApiFp(configuration).createMessage(body, channelId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {CreatePostRequest} body
         * @param {number} channelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPost(body: CreatePostRequest, channelId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Post>> {
            return ChannelControllerApiFp(configuration).createPost(body, channelId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {CreatePrivateChatRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPrivateChatChannel(body: CreatePrivateChatRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<Channel>> {
            return ChannelControllerApiFp(configuration).createPrivateChatChannel(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} channelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteChannel(channelId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ChannelControllerApiFp(configuration).deleteChannel(channelId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} channelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChannelById(channelId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Channel>> {
            return ChannelControllerApiFp(configuration).getChannelById(channelId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChannels(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Channel>>> {
            return ChannelControllerApiFp(configuration).getChannels(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} channelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMembers(channelId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<User>>> {
            return ChannelControllerApiFp(configuration).getMembers(channelId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} channelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMessages(channelId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Message>>> {
            return ChannelControllerApiFp(configuration).getMessages(channelId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} channelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLastMessage(channelId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Message | null>> {
            return ChannelControllerApiFp(configuration).getLastMessage(channelId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} channelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPosts(channelId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Post>>> {
            return ChannelControllerApiFp(configuration).getPosts(channelId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} channelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLastPost(channelId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Post | null>> {
            return ChannelControllerApiFp(configuration).getLastPost(channelId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} channelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async join(channelId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Channel>> {
            return ChannelControllerApiFp(configuration).join(channelId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {UpdateChannelRequest} body
         * @param {number} channelId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateChannel(body: UpdateChannelRequest, channelId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Channel>> {
            return ChannelControllerApiFp(configuration).updateChannel(body, channelId, options).then((request) => request(axios, basePath));
        },
    };
};

export function createChannelController(): ChannelControllerApi {
    return new ChannelControllerApi({ accessToken: localStorage.getItem('accessToken')! });
}

/**
 * ChannelControllerApi - object-oriented interface
 * @export
 * @class ChannelControllerApi
 * @extends {BaseAPI}
 */
export class ChannelControllerApi extends BaseAPI {
    /**
     *
     * @param {CreateChannelRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelControllerApi
     */
    public async createChannel(body: CreateChannelRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<Channel>> {
        return ChannelControllerApiFp(this.configuration).createChannel(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {CreateGroupChatRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelControllerApi
     */
    public async createGroupChatChannel(body: CreateGroupChatRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<Channel>> {
        return ChannelControllerApiFp(this.configuration).createGroupChatChannel(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {CreateMessageRequest} body
     * @param {number} channelId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelControllerApi
     */
    public async createMessage(body: CreateMessageRequest, channelId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Message>> {
        return ChannelControllerApiFp(this.configuration).createMessage(body, channelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {CreatePostRequest} body
     * @param {number} channelId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelControllerApi
     */
    public async createPost(body: CreatePostRequest, channelId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Post>> {
        return ChannelControllerApiFp(this.configuration).createPost(body, channelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {CreatePrivateChatRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelControllerApi
     */
    public async createPrivateChatChannel(body: CreatePrivateChatRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<Channel>> {
        return ChannelControllerApiFp(this.configuration).createPrivateChatChannel(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} channelId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelControllerApi
     */
    public async deleteChannel(channelId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ChannelControllerApiFp(this.configuration).deleteChannel(channelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} channelId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelControllerApi
     */
    public async getChannelById(channelId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Channel>> {
        return ChannelControllerApiFp(this.configuration).getChannelById(channelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelControllerApi
     */
    public async getChannels(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Channel>>> {
        return ChannelControllerApiFp(this.configuration).getChannels(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} channelId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelControllerApi
     */
    public async getMembers(channelId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<User>>> {
        return ChannelControllerApiFp(this.configuration).getMembers(channelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} channelId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelControllerApi
     */
    public async getMessages(channelId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Message>>> {
        return ChannelControllerApiFp(this.configuration).getMessages(channelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} channelId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelControllerApi
     */
    public async getLastMessage(channelId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Message | null>> {
        return ChannelControllerApiFp(this.configuration).getLastMessage(channelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} channelId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelControllerApi
     */
    public async getPosts(channelId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Post>>> {
        return ChannelControllerApiFp(this.configuration).getPosts(channelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} channelId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelControllerApi
     */
    public async getLastPost(channelId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Post | null>> {
        return ChannelControllerApiFp(this.configuration).getLastPost(channelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} channelId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelControllerApi
     */
    public async join(channelId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Channel>> {
        return ChannelControllerApiFp(this.configuration).join(channelId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {UpdateChannelRequest} body
     * @param {number} channelId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelControllerApi
     */
    public async updateChannel(body: UpdateChannelRequest, channelId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Channel>> {
        return ChannelControllerApiFp(this.configuration).updateChannel(body, channelId, options).then((request) => request(this.axios, this.basePath));
    }
}
